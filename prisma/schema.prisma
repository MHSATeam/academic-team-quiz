generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Question {
  id          Int                 @id @default(autoincrement())
  question    String
  answer      String
  createdYear Int                 @db.SmallInt
  categoryId  Int
  category    Category            @relation(fields: [categoryId], references: [id])
  roundId     Int?
  round       Round?              @relation(fields: [roundId], references: [id])
  userAnswers UserQuestionTrack[]
  createdOn   DateTime            @default(now()) @db.Timestamptz(3)
  modifiedOn  DateTime            @default(now()) @updatedAt @db.Timestamptz(3)
}

model Set {
  id               Int            @id @default(autoincrement())
  name             String
  author           String?
  difficulty       Int
  categoryRoundId  Int?
  categoryRound    CategoryRound? @relation(fields: [categoryRoundId], references: [id])
  alphabetRoundId  Int?
  alphabetRound    AlphabetRound? @relation(fields: [alphabetRoundId], references: [roundId])
  lightningRoundId Int?
  lightningRound   Round?         @relation(fields: [lightningRoundId], references: [id])
  themeRoundId     Int?
  themeRound       ThemeRound?    @relation(fields: [themeRoundId], references: [roundId])
  createdOn        DateTime       @default(now()) @db.Timestamptz(3)
  modifiedOn       DateTime       @default(now()) @updatedAt @db.Timestamptz(3)
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String
  questions         Question[]
  categoryTeamGroup CategoryTeamGroup[]
  createdOn         DateTime            @default(now()) @db.Timestamptz(3)
  modifiedOn        DateTime            @default(now()) @updatedAt @db.Timestamptz(3)
}

model Round {
  id                Int                @id @default(autoincrement())
  name              String?
  questions         Question[]
  alphabetRound     AlphabetRound?
  categoryTeamGroup CategoryTeamGroup?
  themeRound        ThemeRound?
  sets              Set[]
  createdOn         DateTime           @default(now()) @db.Timestamptz(3)
  modifiedOn        DateTime           @default(now()) @updatedAt @db.Timestamptz(3)
}

model AlphabetRound {
  roundId    Int      @id
  round      Round    @relation(fields: [roundId], references: [id])
  letter     String   @db.Char()
  sets       Set[]
  createdOn  DateTime @default(now()) @db.Timestamptz(3)
  modifiedOn DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model ThemeRound {
  roundId    Int      @id
  round      Round    @relation(fields: [roundId], references: [id])
  theme      String
  sets       Set[]
  createdOn  DateTime @default(now()) @db.Timestamptz(3)
  modifiedOn DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model CategoryRound {
  id         Int                 @id @default(autoincrement())
  teamGroups CategoryTeamGroup[]
  sets       Set[]
  createdOn  DateTime            @default(now()) @db.Timestamptz(3)
  modifiedOn DateTime            @default(now()) @updatedAt @db.Timestamptz(3)
}

model CategoryTeamGroup {
  id              Int           @id @default(autoincrement())
  team            String        @db.Char()
  roundId         Int           @unique
  round           Round         @relation(fields: [roundId], references: [id])
  categoryRoundId Int
  categoryRound   CategoryRound @relation(fields: [categoryRoundId], references: [id])
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  createdOn       DateTime      @default(now()) @db.Timestamptz(3)
  modifiedOn      DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model UserQuestionTrack {
  id         Int       @id @default(autoincrement())
  userId     String
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  result     Result
  createdOn  DateTime  @default(now()) @db.Timestamptz(3)
}

enum Result {
  Correct
  Incorrect
}

model ManagementTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresOn DateTime @db.Timestamptz(3)
  createdOn DateTime @default(now()) @db.Timestamptz(3)
}
